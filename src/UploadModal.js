import React, { Component } from 'react';
import Dropzone from 'react-dropzone';
import { Modal } from 'react-bootstrap';
import Spinner from './Spinner';

const CVX_SERVER = "http://cvx.daxtra.com"; //- or any other Daxtra server
const CVX_SECURE_TOKEN = "XXXXXXX"; //-- secure token provided to you by Daxtra

class UploadModal extends Component {
    
    constructor(props) {
        super(props);
        this.state = { 
            files:[],
            isLoading: false
        };
    }

    onDrop = async(files) => { 
        this.setState({isLoading: true});
        const uploadFiles = await this.handleFileUploadField(files);
        this.setState({files: uploadFiles /* files(?) */, isLoading: false});
    }

    /*timeout(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }*/

    //-- function which is fired when button "Send to CVX" is 
    handleFileUploadField = (files) => {
        //await this.timeout(5000);
        const formData = new FormData();
        formData.append("file", files[0]);
        formData.append("account", this.CVX_SECURE_TOKEN + "; -turbo"); //-- add turbo processing option
        
        const xhr = this.prepareXhr(this.cvxReturnHandler);
        xhr.open("POST", this.CVX_SERVER + "/cvx/rest/api/v1/profile/full/json");
        xhr.send(formData);
    }

    prepareXhr(handler) {
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function(e) { // readyState 属性が変更する都度呼び出される EventHandler
            if (xhr.readyState != XMLHttpRequest.DONE) { // XMLHttpRequest.DONE : 操作完了
                return; 
            }

            if ((xhr.readyState == XMLHttpRequest.DONE) && (xhr.status == 200)) {      
                handler(this.responseText);
            } else {
                var resultString = '';
                if(this.responseText.match(/^{/)) {   //-- errors generated by CVX
                    resultString = this.responseText;
                } else { //-- other errors represent as json with status 999
                    resultString = '{"CSERRROR":{"message":"' + xhr.statusText + '", "code": 999}}';
                }
                handler(resultString, xhr.status);
            }
        };

        return xhr;
    }

    cvxReturnHandler(jsonResponse, errorCode) {
        var profileJson = JSON.parse(jsonResponse);
        if(errorCode || profileJson.CSERROR){
            //-- report error
        } else if(profileJson.StructuredResume) {
            //-- do something with profile_json which contains all
            //- extracted data
        }
    }

    render() {
      return (
        <Modal {...this.props} bsSize="small" aria-labelledby="contained-modal-title-sm">
            <Modal.Header closeButton onClick={this.props.onHide}>
                <Modal.Title id="contained-modal-title-sm" style={{ 'font-weight': 'bold' }}>
                    ファイルを選択してください。
                </Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <section>
                <div variant="dropzone">
                    <Dropzone onDrop={this.onDrop.bind(this)}>
                        <Spinner isLoading={this.state.isLoading} />
                        <p>ファイルを選択してください。<br/>
                        ファイルはドラッグ&ドロップできます。</p>
                    </Dropzone>
                </div>
            </section>
          </Modal.Body>
        </Modal>
      );
    }
  }

  export default UploadModal;